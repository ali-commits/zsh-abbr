#!/usr/bin/env zsh

typeset -g _ABBR_VERSION='0.4.0'

typeset -Ag _abbr

__abbr::magic_abbrev_expand() {
  local MATCH
  LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9]#}
  local abbr=${_abbr[$MATCH]:-  $MATCH}
  local kind=${abbr[1,1]}
  local is_eval=${abbr[2,2]}
  local newbuffer=${abbr[3,-1]}
  if [[ $kind == "c" && $LBUFFER != "" ]]; then
    newbuffer=$MATCH
  fi
  if [[ "$is_eval" == "1" ]]; then
    newbuffer=$(eval "echo \"$newbuffer\"")
  fi
  LBUFFER+=$newbuffer

  zle self-insert # add space after the expantion
  # LBUFFER=$LBUFFER[1,-2]
}

__abbr::no_magic_abbrev_expand() {
  LBUFFER+=' '
}

__abbr::magic_abbrev_expand_and_return() {
  local MATCH
  LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9]#}
  local abbr=${_abbr[$MATCH]:-  $MATCH}
  local kind=${abbr[1,1]}
  local is_eval=${abbr[2,2]}
  local newbuffer=${abbr[3,-1]}
  if [[ $kind == "c" && $LBUFFER != "" ]]; then
    newbuffer=$MATCH
  fi
  if [[ "$is_eval" == "1" ]]; then
    newbuffer=$(eval "echo \"$newbuffer\"")
  fi
  LBUFFER+=$newbuffer
  zle accept-line

}

__abbr::init() {
  setopt extended_glob
  zle -N __abbr::magic_abbrev_expand
  zle -N __abbr::no_magic_abbrev_expand
  zle -N __abbr::magic_abbrev_expand_and_return

  bindkey -v
  bindkey " "   __abbr::magic_abbrev_expand
  bindkey "^x " __abbr::no_magic_abbrev_expand
  bindkey "\r" __abbr::magic_abbrev_expand_and_return
  
}

__abbr::list() {
  local kind_filter=$1
  local key value kind
  for key in ${(k)_abbr}; do
    value=${_abbr[$key]}
    kind=${value[1,1]}
    value=${value[3,-1]}
    if [[ $kind_filter == a || $kind_filter == $kind ]]; then
      echo "$key='$value'"
    fi
  done
}

__abbr::version() {
  echo "abbr ${_ABBR_VERSION}"
}

__abbr::help() {
  __abbr::version
  echo "usage: abbr [OPTIONS] {name=value ...}"
  echo "       abbr -u {name ...}"
  echo "       abbr --init"
  echo
  echo "options:"
  echo "  -c, --command   register alias as 'alias name=value'"
  echo "  -g, --global    register alias as 'alias -g name=value'"
  echo "  -e, --eval      evaluates subshells on expansion. "
  echo "  -u, --unset     unregister alias"
  echo "  -i, --init      initialize abbr. execute with .zshrc"
  echo "  -h, --help      show this help"
  echo "  -v, --version   show version"
}

__abbr::unregist() {
  local key=$1
  if [[ -n "${_abbr[$key]}" ]]; then
    unalias $key
    unset "_abbr[$key]"
  else
    echo "no such alias: $key" >&2
  fi
}

__abbr::regist() {
  local kind=$1 is_eval=$2 key=${3%%=*} value=${3#*=}
  if [[ "$kind" == "f" ]]; then
    echo "WARN: -f option is deprecated. Use -g -e options." 1>&2
    echo "      ex) abbr -g -e $key='\$($value)'" 1>&2
    value="\$($value)"
    is_eval=1
    kind=g
  fi
  case "$kind" in
    g) alias -g $key="$value";;
    c) alias    $key="$value";;
  esac
  _abbr[$key]="$kind$is_eval$value"
}

# option parse & execute
local kind
local is_eval=0
local -a args
while [ $# -gt 0 ]; do
  case "$1" in
    -i|--init)      __abbr::init; return;;
    -h|--help)      __abbr::help; return;;
    -v|--version)   __abbr::version; return;;
    -u|--unset)     kind=u;;
    -c|--command)   kind=c;;
    -g|--global)    kind=g;;
    -f|--function)  kind=f;;
    -e|--eval)      is_eval=1;;
    *) args=("${args[@]}" $1) ;;
  esac
  shift
done

local value
if [[ $#args == 0 ]]; then
  __abbr::list ${kind:-a}
  return
fi
if [[ "$kind" == "u" ]]; then
  for value in ${args[@]}; do
    __abbr::unregist $value
  done
else
  for value in ${args[@]}; do
    __abbr::regist ${kind:-c} $is_eval $value
  done
fi
